{
    "basic.time_plot": {
        "code": "def time_plot():\n    fig, ax = plt.subplots()\n    ax.plot([0, 1, 2], [0, 1, 2])\n    fig.canvas.draw()\n",
        "goal_time": 2.0,
        "name": "basic.time_plot",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "basic.time_plot",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "basic.time_projection": {
        "code": "def time_projection(proj):\n    fig, ax = plt.subplots(subplot_kw=dict(projection=proj))\n    fig.canvas.draw()\n",
        "goal_time": 2.0,
        "name": "basic.time_projection",
        "number": 0,
        "param_names": [
            "proj"
        ],
        "params": [
            [
                "'rectilinear'",
                "'polar'",
                "'aitoff'",
                "'hammer'",
                "'mollweide'",
                "'lambert'"
            ]
        ],
        "pretty_name": "basic.time_projection",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "basic.time_savefig": {
        "code": "def time_savefig():\n    fig, ax = plt.subplots()\n    fig.savefig('time_savefig.png')\n",
        "goal_time": 2.0,
        "name": "basic.time_savefig",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "basic.time_savefig",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "basic.time_subplots": {
        "code": "def time_subplots(N):\n    fig, ax = plt.subplots(N, N)\n    fig.canvas.draw()\n",
        "goal_time": 2.0,
        "name": "basic.time_subplots",
        "number": 0,
        "param_names": [
            "N"
        ],
        "params": [
            [
                "1",
                "2",
                "10"
            ]
        ],
        "pretty_name": "basic.time_subplots",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "image.InterpolationSuite.time_full_draw": {
        "code": "def time_full_draw(self, interpolation):\n    self.ax.imshow(self.data, interpolation=interpolation,\n                   extent=(1, 2, 1, 2))\n    self.fig.canvas.draw()\n",
        "goal_time": 2.0,
        "name": "image.InterpolationSuite.time_full_draw",
        "number": 0,
        "param_names": [
            "interpolation"
        ],
        "params": [
            [
                "'none'",
                "'nearest'",
                "'bilinear'",
                "'bicubic'"
            ]
        ],
        "pretty_name": "image.InterpolationSuite.time_full_draw",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "image.InterpolationSuite.time_setup": {
        "code": "def time_setup(self, interpolation):\n    self.ax.imshow(self.data, interpolation=interpolation,\n                   extent=(1, 2, 1, 2))\n",
        "goal_time": 2.0,
        "name": "image.InterpolationSuite.time_setup",
        "number": 0,
        "param_names": [
            "interpolation"
        ],
        "params": [
            [
                "'none'",
                "'nearest'",
                "'bilinear'",
                "'bicubic'"
            ]
        ],
        "pretty_name": "image.InterpolationSuite.time_setup",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "image.MaskSuite.time_full_draw": {
        "code": "def time_full_draw(self, method):\n    self.ax.imshow(self.A, interpolation='nearest')\n    self.fig.canvas.draw()\n",
        "goal_time": 2.0,
        "name": "image.MaskSuite.time_full_draw",
        "number": 0,
        "param_names": [
            "method"
        ],
        "params": [
            [
                "'nan'",
                "'mask'"
            ]
        ],
        "pretty_name": "image.MaskSuite.time_full_draw",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "image.MaskSuite.time_setup": {
        "code": "def time_setup(self, method):\n    self.ax.imshow(self.A, interpolation='nearest')\n",
        "goal_time": 2.0,
        "name": "image.MaskSuite.time_setup",
        "number": 0,
        "param_names": [
            "method"
        ],
        "params": [
            [
                "'nan'",
                "'mask'"
            ]
        ],
        "pretty_name": "image.MaskSuite.time_setup",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "image.TypeSuite.time_full_draw": {
        "code": "def time_full_draw(self, t):\n    self.ax.imshow(self.data)\n    self.fig.canvas.draw()\n",
        "goal_time": 2.0,
        "name": "image.TypeSuite.time_full_draw",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "'<f8'",
                "'>f8'",
                "<class 'numpy.float128'>",
                "<class 'int'>",
                "<class 'bool'>"
            ]
        ],
        "pretty_name": "image.TypeSuite.time_full_draw",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "image.TypeSuite.time_setup": {
        "code": "def time_setup(self, t):\n    self.ax.imshow(self.data)\n",
        "goal_time": 2.0,
        "name": "image.TypeSuite.time_setup",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "'<f8'",
                "'>f8'",
                "<class 'numpy.float128'>",
                "<class 'int'>",
                "<class 'bool'>"
            ]
        ],
        "pretty_name": "image.TypeSuite.time_setup",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "png.time_imread_png_uint16": {
        "code": "def time_imread_png_uint16():\n    img = _png.read_png_int(os.path.join(os.path.dirname(__file__),\n                                         'data/uint16.png'))\n",
        "goal_time": 2.0,
        "name": "png.time_imread_png_uint16",
        "number": 0,
        "param_names": [],
        "params": [],
        "pretty_name": "png.time_imread_png_uint16",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "png.time_pngsuite": {
        "code": "def time_pngsuite(fname):\n    data = plt.imread(os.path.join(dirname, fname))\n",
        "goal_time": 2.0,
        "name": "png.time_pngsuite",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'basn0g01.png'",
                "'basn0g02.png'",
                "'basn0g04.png'",
                "'basn0g08.png'",
                "'basn0g16.png'",
                "'basn2c08.png'",
                "'basn2c16.png'",
                "'basn3p01.png'",
                "'basn3p02.png'",
                "'basn3p04.png'",
                "'basn3p08.png'",
                "'basn4a08.png'",
                "'basn4a16.png'",
                "'basn6a08.png'",
                "'basn6a16.png'"
            ]
        ],
        "pretty_name": "png.time_pngsuite",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "transforms.BasicSuite.time_creation": {
        "code": "def time_creation(self, name_args):\n    self.init(*self.args)\n",
        "goal_time": 2.0,
        "name": "transforms.BasicSuite.time_creation",
        "number": 0,
        "param_names": [
            "name_and_args"
        ],
        "params": [
            [
                "('TransformNode',)",
                "('Bbox', [[0, 1], [2, 3]])",
                "('Bbox.unit',)",
                "('Bbox.null',)",
                "('Bbox.from_bounds', 0, 1, 2, 3)",
                "('Bbox.from_extents', 0, 1, 2, 3)",
                "('TransformedBbox', 'bbox', 'affine1')",
                "('LockableBbox', 'bbox')",
                "('Transform',)",
                "('TransformWrapper', 'affine1')",
                "('AffineBase',)",
                "('Affine2D',)",
                "('Affine2D.from_values', 1, 2, 3, 4, 5, 6)",
                "('Affine2D.identity',)",
                "('IdentityTransform',)",
                "('BlendedGenericTransform', 'affine1', 'affine2')",
                "('BlendedAffine2D', 'affine1', 'affine2')",
                "('CompositeGenericTransform', 'affine1', 'affine2')",
                "('CompositeAffine2D', 'affine1', 'affine2')",
                "('BboxTransform', 'bbox', 'bbox')",
                "('BboxTransformTo', 'bbox')",
                "('BboxTransformToMaxOnly', 'bbox')",
                "('BboxTransformFrom', 'bbox')",
                "('ScaledTranslation', 1, 1, 'affine1')",
                "('TransformedPath', 'path', 'affine1')",
                "('TransformedPatchPath', 'patch')"
            ]
        ],
        "pretty_name": "transforms.BasicSuite.time_creation",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "transforms.BasicSuite.time_frozen": {
        "code": "def time_frozen(self, name_args):\n    obj = self.init(*self.args)\n    obj.frozen()\n",
        "goal_time": 2.0,
        "name": "transforms.BasicSuite.time_frozen",
        "number": 0,
        "param_names": [
            "name_and_args"
        ],
        "params": [
            [
                "('TransformNode',)",
                "('Bbox', [[0, 1], [2, 3]])",
                "('Bbox.unit',)",
                "('Bbox.null',)",
                "('Bbox.from_bounds', 0, 1, 2, 3)",
                "('Bbox.from_extents', 0, 1, 2, 3)",
                "('TransformedBbox', 'bbox', 'affine1')",
                "('LockableBbox', 'bbox')",
                "('Transform',)",
                "('TransformWrapper', 'affine1')",
                "('AffineBase',)",
                "('Affine2D',)",
                "('Affine2D.from_values', 1, 2, 3, 4, 5, 6)",
                "('Affine2D.identity',)",
                "('IdentityTransform',)",
                "('BlendedGenericTransform', 'affine1', 'affine2')",
                "('BlendedAffine2D', 'affine1', 'affine2')",
                "('CompositeGenericTransform', 'affine1', 'affine2')",
                "('CompositeAffine2D', 'affine1', 'affine2')",
                "('BboxTransform', 'bbox', 'bbox')",
                "('BboxTransformTo', 'bbox')",
                "('BboxTransformToMaxOnly', 'bbox')",
                "('BboxTransformFrom', 'bbox')",
                "('ScaledTranslation', 1, 1, 'affine1')",
                "('TransformedPath', 'path', 'affine1')",
                "('TransformedPatchPath', 'patch')"
            ]
        ],
        "pretty_name": "transforms.BasicSuite.time_frozen",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "transforms.BboxSetSuite.time_bbox_intersection": {
        "code": "def time_bbox_intersection(self, extent):\n    mtransforms.Bbox.intersection(self.bbox1, self.bbox2)\n",
        "goal_time": 2.0,
        "name": "transforms.BboxSetSuite.time_bbox_intersection",
        "number": 0,
        "param_names": [
            "extent"
        ],
        "params": [
            [
                "(0, 0, 1, 1)",
                "(0.5, 0.5, 1.5, 1.5)",
                "(0.5, 0, 0.75, 0.75)",
                "(0.5, 1.5, 1, 2.5)",
                "(1, 1, 2, 2)"
            ]
        ],
        "pretty_name": "transforms.BboxSetSuite.time_bbox_intersection",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "transforms.BboxSetSuite.time_bbox_union": {
        "code": "def time_bbox_union(self, extent):\n    mtransforms.Bbox.union((self.bbox1, self.bbox2))\n",
        "goal_time": 2.0,
        "name": "transforms.BboxSetSuite.time_bbox_union",
        "number": 0,
        "param_names": [
            "extent"
        ],
        "params": [
            [
                "(0, 0, 1, 1)",
                "(0.5, 0.5, 1.5, 1.5)",
                "(0.5, 0, 0.75, 0.75)",
                "(0.5, 1.5, 1, 2.5)",
                "(1, 1, 2, 2)"
            ]
        ],
        "pretty_name": "transforms.BboxSetSuite.time_bbox_union",
        "repeat": 0,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds"
    },
    "version": 1
}